// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entitites.ShopProductDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Price");

                    b.Property<Guid>("ProductGuid");

                    b.Property<int>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("ShopDAOGuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductGuid");

                    b.HasIndex("ShopDAOGuid");

                    b.ToTable("ShopProducts");
                });

            modelBuilder.Entity("DataAccessLayer.DAOs.BaseUserDAO", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsAdmin");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Username");

                    b.HasKey("Guid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccessLayer.DAOs.ProductDAO", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Guid");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataAccessLayer.DAOs.RecordsPerCartDAO", b =>
                {
                    b.Property<Guid>("CartGuid");

                    b.Property<Guid>("ProductGuid");

                    b.Property<Guid?>("CartRecords");

                    b.Property<int>("PurchasedQuantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("ShopDAOGuid");

                    b.HasKey("CartGuid", "ProductGuid");

                    b.HasIndex("CartRecords");

                    b.HasIndex("ShopDAOGuid");

                    b.ToTable("CartRecords");
                });

            modelBuilder.Entity("DataAccessLayer.DAOs.ShopDAO", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("ShopName");

                    b.Property<int>("ShopState");

                    b.HasKey("Guid");

                    b.HasIndex("ShopName")
                        .IsUnique()
                        .HasFilter("[ShopName] IS NOT NULL");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("DataAccessLayer.DAOs.ShopOwnerDAO", b =>
                {
                    b.Property<Guid>("OwnerGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppointerGuid");

                    b.Property<Guid>("OwnerBaseUserGuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("ShopDAOGuid");

                    b.Property<Guid?>("ShopDAOGuid1");

                    b.Property<Guid>("ShopGuid");

                    b.HasKey("OwnerGuid");

                    b.HasIndex("ShopDAOGuid");

                    b.HasIndex("ShopDAOGuid1");

                    b.ToTable("ShopOwners");
                });

            modelBuilder.Entity("DataAccessLayer.DAOs.ShoppingBagDAO", b =>
                {
                    b.Property<Guid>("BagGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UserGuid");

                    b.HasKey("BagGuid");

                    b.ToTable("ShoppingBags");
                });

            modelBuilder.Entity("DataAccessLayer.DAOs.ShoppingCartDAO", b =>
                {
                    b.Property<Guid>("cartGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("Carts");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ShopGuid");

                    b.Property<Guid>("UserGuid");

                    b.HasKey("cartGuid");

                    b.HasIndex("Carts");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ApplicationCore.Entitites.ShopProductDAO", b =>
                {
                    b.HasOne("DataAccessLayer.DAOs.ProductDAO", "Product")
                        .WithMany()
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.DAOs.ShopDAO")
                        .WithMany("ShopProducts")
                        .HasForeignKey("ShopDAOGuid");
                });

            modelBuilder.Entity("DataAccessLayer.DAOs.RecordsPerCartDAO", b =>
                {
                    b.HasOne("DataAccessLayer.DAOs.ShoppingCartDAO")
                        .WithMany("RecordsGuids")
                        .HasForeignKey("CartRecords");

                    b.HasOne("DataAccessLayer.DAOs.ShopDAO")
                        .WithMany("UsersPurchaseHistory")
                        .HasForeignKey("ShopDAOGuid");
                });

            modelBuilder.Entity("DataAccessLayer.DAOs.ShopOwnerDAO", b =>
                {
                    b.HasOne("DataAccessLayer.DAOs.ShopDAO")
                        .WithMany("Managers")
                        .HasForeignKey("ShopDAOGuid");

                    b.HasOne("DataAccessLayer.DAOs.ShopDAO")
                        .WithMany("Owners")
                        .HasForeignKey("ShopDAOGuid1");
                });

            modelBuilder.Entity("DataAccessLayer.DAOs.ShoppingCartDAO", b =>
                {
                    b.HasOne("DataAccessLayer.DAOs.ShoppingBagDAO")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
